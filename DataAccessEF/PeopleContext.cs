// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataAccessEF
{
    public partial class PeopleContext : DbContext
    {
        public PeopleContext()
        {
        }

        public PeopleContext(DbContextOptions<PeopleContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TestAddress> TestAddress { get; set; }
        public virtual DbSet<TestEmail> TestEmail { get; set; }
        public virtual DbSet<TestPerson> TestPerson { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("MOMPSOASTG")
                .UseCollation("USING_NLS_COMP");

            modelBuilder.Entity<TestAddress>(entity =>
            {
                entity.HasKey(e => e.Addressid)
                    .HasName("TEST_ADDRESS_PK");

                entity.ToTable("TEST_ADDRESS");

                entity.Property(e => e.Addressid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ADDRESSID");

                entity.Property(e => e.City)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("CITY");

                entity.Property(e => e.State)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("STATE");

                entity.Property(e => e.Streetadress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("STREETADRESS");

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("ZIPCODE");
            });

            modelBuilder.Entity<TestEmail>(entity =>
            {
                entity.HasKey(e => e.Emailid)
                    .HasName("EMAIL_PK");

                entity.ToTable("TEST_EMAIL");

                entity.Property(e => e.Emailid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EMAILID");

                entity.Property(e => e.Emailadress)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("EMAILADRESS");
            });

            modelBuilder.Entity<TestPerson>(entity =>
            {
                entity.HasKey(e => e.Personid)
                    .HasName("TEST_PERSON_PK");

                entity.ToTable("TEST_PERSON");

                entity.Property(e => e.Personid)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("PERSONID");

                entity.Property(e => e.AddressId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("ADDRESS_ID");

                entity.Property(e => e.Age)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("AGE");

                entity.Property(e => e.EmailId)
                    .HasColumnType("NUMBER(38)")
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("NAME");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.TestPerson)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("TEST_PERSON_FK2");

                entity.HasOne(d => d.Email)
                    .WithMany(p => p.TestPerson)
                    .HasForeignKey(d => d.EmailId)
                    .HasConstraintName("TEST_PERSON_FK1");
            });

            modelBuilder.HasSequence("COMX_CHOICE_SEQ");

            modelBuilder.HasSequence("COMX_CUSTOMER_ANSWER_SEQ");

            modelBuilder.HasSequence("COMX_CUSTOMER_ANSWER_SEQ1");

            modelBuilder.HasSequence("COMX_CUSTOMER_SEQ");

            modelBuilder.HasSequence("COMX_QUESTION_SEQ");

            modelBuilder.HasSequence("ELMAH$ERROR_SEQ");

            modelBuilder.HasSequence("EPAY_ADDRESS_PROF_SEQ");

            modelBuilder.HasSequence("EPAY_AUTO_RECON_FILE_SEQ");

            modelBuilder.HasSequence("EPAY_AUTO_RECON_SEQ");

            modelBuilder.HasSequence("EPAY_CYBS_PULL_ERRORS_SEQ");

            modelBuilder.HasSequence("EPAY_CYBS_PULL_LOGS_SEQ");

            modelBuilder.HasSequence("EPAY_CYBS_TRAN_REPORT_SEQ");

            modelBuilder.HasSequence("EPAY_LOGS_ID_SEQ");

            modelBuilder.HasSequence("EPAY_OAB_PULL_ERRORS_SEQ");

            modelBuilder.HasSequence("EPAY_OAB_PULL_LOGS_SEQ");

            modelBuilder.HasSequence("EPAY_OMANNET_PULL_LOGS_SEQ");

            modelBuilder.HasSequence("EPAY_OMANNET_SANAD_LOGS_SEQ");

            modelBuilder.HasSequence("EPAY_OMNET_PST_LGS_SEQ");

            modelBuilder.HasSequence("EPAY_OMNET_PULL_ERRORS_SEQ");

            modelBuilder.HasSequence("EPAY_OMNET_RCPT_LGS_SEQ");

            modelBuilder.HasSequence("EPAY_OMNNET_LOG_SEQ");

            modelBuilder.HasSequence("EPAY_PAYTABS_LOG_SEQ");

            modelBuilder.HasSequence("EPAY_PAYTABS_MERCHANT_DETAILS_SEQ");

            modelBuilder.HasSequence("EPAY_PAYTABS_MERCHANT_MAPPING_SEQ");

            modelBuilder.HasSequence("EPAY_PAYTABS_PULL_LOGS_SEQ");

            modelBuilder.HasSequence("EPAY_PAYTABS_PULL_SEQ");

            modelBuilder.HasSequence("EPAY_PAYTABS_RECEIPT_LOGS_SEQ");

            modelBuilder.HasSequence("EPAY_POST_SEQ");

            modelBuilder.HasSequence("EPAY_SOURCE_UMS_MAPPING_SEQ");

            modelBuilder.HasSequence("LCT_CARD_TRANS_REF_SEQ");

            modelBuilder.HasSequence("MEDIA_AD_ATTACHMENTS_SEQ");

            modelBuilder.HasSequence("MEDIA_AD_DETAILS_SEQ");

            modelBuilder.HasSequence("MEDIA_NEWSPAPERS_SEQ");

            modelBuilder.HasSequence("MER_MAP_SEQ");

            modelBuilder.HasSequence("MERCHANTTRANSACTIONREF");

            modelBuilder.HasSequence("PH_GATEWAY_POSTED_RESULT_SEQ");

            modelBuilder.HasSequence("ROP_FTP_FILES_ID");

            modelBuilder.HasSequence("ROP_FTP_SEQ_ID");

            modelBuilder.HasSequence("ROP_PERSON_SER_ID_SEQ");

            modelBuilder.HasSequence("SEQ_AREA_INT_SUG");

            modelBuilder.HasSequence("SEQ_COMP_TYPE");

            modelBuilder.HasSequence("SEQ_EPAY_MAINTENANCE_LOG");

            modelBuilder.HasSequence("SEQ_EPAY_REPORT_LOG");

            modelBuilder.HasSequence("SEQ_SSO_APPLICATIONS");

            modelBuilder.HasSequence("SEQ_SSO_LOGIN");

            modelBuilder.HasSequence("SEQ_SSO_REQUEST_LOG");

            modelBuilder.HasSequence("SEQ_VAC_SUGGESTION");

            modelBuilder.HasSequence("SEQ_VS_OTP");

            modelBuilder.HasSequence("SME_ATTACHEMENT_SEQ");

            modelBuilder.HasSequence("SME_DELEGATION_SEQ");

            modelBuilder.HasSequence("SME_DETAILS_SEQ");

            modelBuilder.HasSequence("SME_PROJECT_SEQ");

            modelBuilder.HasSequence("SME_QUOTATION_SEQ");

            modelBuilder.HasSequence("SME_REQUESTED_ORDER_SEQ");

            modelBuilder.HasSequence("VS_LOGID");

            modelBuilder.HasSequence("WEB_PAYMENT_VERIFICATION_SEQ");

            modelBuilder.HasSequence("WEB_SERVICES_USERS_SEQ");

            modelBuilder.HasSequence("WS_ACCESS_SEQ");

            modelBuilder.HasSequence("WS_METHODS_SEQ");

            modelBuilder.HasSequence("WS_SERVICES_SEQ");

            modelBuilder.HasSequence("WSMS_CONTACT_PERSONS_SEQ");

            modelBuilder.HasSequence("WSMS_DB_LOG_SEQ");

            modelBuilder.HasSequence("WSMS_DEVELOPERS_SEQ");

            modelBuilder.HasSequence("WSMS_DOCUMENT_TYPE_MLD_SEQ");

            modelBuilder.HasSequence("WSMS_DOCUMENT_TYPES_SEQ");

            modelBuilder.HasSequence("WSMS_ENTITIES_SEQ");

            modelBuilder.HasSequence("WSMS_EXTERNALSERVICE_USERS_SEQ");

            modelBuilder.HasSequence("WSMS_HOSTED_SERVERS_SEQ");

            modelBuilder.HasSequence("WSMS_METHOD_END_USERS_SEQ");

            modelBuilder.HasSequence("WSMS_SERVER_SEQ");

            modelBuilder.HasSequence("WSMS_SERVER_TYPES_SEQ");

            modelBuilder.HasSequence("WSMS_SERVERS_SEQ1");

            modelBuilder.HasSequence("WSMS_SERVICE_DOCUMENTS_SEQ");

            modelBuilder.HasSequence("WSMS_SERVICE_TYPE_MLD_SEQ");

            modelBuilder.HasSequence("WSMS_SERVICE_TYPE_SEQ");

            modelBuilder.HasSequence("WSMS_STATUS_MLD_SEQ");

            modelBuilder.HasSequence("WSMS_STATUS_SEQ");

            modelBuilder.HasSequence("WSMS_WEB_SERVICE_DEVELOPERS_S");

            modelBuilder.HasSequence("WSMS_WEB_SERVICE_END_USERS_SEQ");

            modelBuilder.HasSequence("WSMS_WEB_SERVICE_LOGS_SEQ");

            modelBuilder.HasSequence("WSMS_WEB_SERVICE_METHODS_SEQ");

            modelBuilder.HasSequence("WSMS_WEB_SERVICE_SOURCE_CODE_");

            modelBuilder.HasSequence("WSMS_WEB_SERVICES_SEQ");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}